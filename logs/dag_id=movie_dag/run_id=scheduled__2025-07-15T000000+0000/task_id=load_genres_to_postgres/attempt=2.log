{"timestamp":"2025-07-15T02:49:39.131058","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-15T02:49:39.132295","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/DAG102.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-15T02:49:42.123491Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:49:42.124091Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:49:42.124846Z","level":"info","event":"Current task name:load_genres_to_***","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:49:42.125284Z","level":"info","event":"Dag name:movie_dag","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:49:42.123978","level":"info","event":"Connection Retrieved '***_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-15T02:49:42.174972","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"NoSuchTableError","exc_value":"genres","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":867,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1159,"name":"_execute_task"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/operator.py","lineno":397,"name":"wrapper"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":216,"name":"execute"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/providers/standard/operators/python.py","lineno":239,"name":"execute_callable"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/callback_runner.py","lineno":81,"name":"run"},{"filename":"/opt/airflow/dags/DAG102.py","lineno":135,"name":"load_genres_to_***"},{"filename":"<string>","lineno":2,"name":"__new__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/util/deprecations.py","lineno":375,"name":"warned"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/sql/schema.py","lineno":618,"name":"__new__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py","lineno":70,"name":"__exit__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/util/compat.py","lineno":211,"name":"raise_"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/sql/schema.py","lineno":614,"name":"__new__"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/sql/schema.py","lineno":689,"name":"_init"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/sql/schema.py","lineno":724,"name":"_autoload"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/engine/reflection.py","lineno":774,"name":"reflect_table"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/engine/reflection.py","lineno":497,"name":"get_columns"},{"filename":"<string>","lineno":2,"name":"get_columns"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/engine/reflection.py","lineno":55,"name":"cache"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/dialects/***ql/base.py","lineno":3902,"name":"get_columns"},{"filename":"<string>","lineno":2,"name":"get_table_oid"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/engine/reflection.py","lineno":55,"name":"cache"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/sqlalchemy/dialects/***ql/base.py","lineno":3782,"name":"get_table_oid"}],"is_group":false,"exceptions":[]}]}
{"timestamp":"2025-07-15T02:49:42.176868Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:49:42.177444Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:49:42.177915Z","level":"info","event":"Task:<Task(PythonOperator): load_genres_to_***>","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:49:42.178380Z","level":"info","event":"Failure caused by genres","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:57:12.084469","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-07-15T02:57:12.085451","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/DAG102.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-07-15T02:57:12.160740Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:57:12.161520Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.QUEUED","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:57:12.162517Z","level":"info","event":"Current task name:load_genres_to_***","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:57:12.163348Z","level":"info","event":"Dag name:movie_dag","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:57:12.161417","level":"info","event":"Connection Retrieved '***_default'","logger":"airflow.hooks.base"}
{"timestamp":"2025-07-15T02:57:12.317347","level":"info","event":"Done. Returned value was: None","logger":"airflow.task.operators.airflow.providers.standard.operators.python.PythonOperator"}
{"timestamp":"2025-07-15T02:57:12.370079Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:57:12.371151Z","level":"info","event":" Previous state of the Task instance: TaskInstanceState.RUNNING","chan":"stdout","logger":"task"}
{"timestamp":"2025-07-15T02:57:12.371917Z","level":"info","event":"Task operator:<Task(PythonOperator): load_genres_to_***>","chan":"stdout","logger":"task"}
